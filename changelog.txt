As regras opcionais terão que capturar também a exceção UnfinishedCode pois:
Considere que a última regra da regra inicial é uma regra obrigatória, como Teste. Caso a regra
falhe, por dois motivos: nao encontrou o token que queria, ou o indice de inicio da regra já é
1 a mais do que o final da lista de tokens. Se for o 1o caso, o erro emitido será o de token nao
reconhecido, porem se for o segundo caso vai emitir a exceção Unfinished code, que está correto pois
a regra é obrigatória.

Agora considere que a regra final é opcional em vez de obrigatória, como a ListaDeTeste. Nesse caso
dentro dessa regra, será chamada a subregra obrigatória 'Teste', e se ela falhar nas mesmas
condições do exemplo anteror, teremos um problema, pq se ela falhar pelo segundo motivo, a exceção
emitida 'UnfinishedCode' estará errada pois a regra é opcional. Anteriormente, a exceção
UnfinishedCode não era capturada pelo bloco catch das regras pois como indica o fim da lista de
tokens, deve ser emitida imediatamente, ao oposta da exceção UnexpectedToken. Porém analisando isso
melhor ela na verdade só deve ser emitida imediatamente pelas regras obrigatórias, e capturadas
pelas opcionais.

Ok, então com a exceção sendo capturada pelas regras opcionais, cosidere este último caso:
A última regra é opcional e o código foi deixado inacabado, por exemplo, se a regra é ListaDeTeste
e o código terminou com um teste escrito parcialmente.
Nesse caso, a subregra Teste vai falhar, RETORNAR O POINTER PARA UMA POSIÇÃO ANTERIOR AO último
TOKEN e emitir a exceção UnfinishedCode, o que está certo. Porém como está dentro de uma
regra opcional esse erro será capturado.
O que vai fazer essa situação dar certo é o fato do pointer estar antes do fim e o comando
sm.throwSavedExceptionAtTheEndOfStartRule()
que deve ser chamado no final da regra principal. Como a exceção terá sido salva, e como a condição
para esse método emitir uma exceção salva é de que o pointer esteja anterior ao index da exceção
salva, então a exceção será finalmente emitida.

================================================================================
ANTERIOR VVV
================================================================================

Substituido o token _chave1 e _chave2 por _colchete1 e _colchete2.
Na difinição dos path de transição foi necessário voltar a fazer o split no caractere " " (espaço)
sem os lookaheads pq os paths "] []" e : "[ []" não estava sendo splitted.

================================================================================
ANTERIOR
================================================================================

A classe Main foi autalizada para incluir um codigo que lê um arquivo chamado codigo.ask e passar
as linhas desse arquivo para o Lexer.

A classe ItemsAdicionais foi corrigida.

================================================================================
ANTERIOR
================================================================================

Antes a regra Inicio foi mesclada com a Especialidade. Porém para melhor clareza de código e
coerência com a grammar-rules.txt a regra Especialidade agora é uma regra normal que extends
GrammarRule, e a Regra início passou a ser a classe SyntaxTree, que não extende GrammarRule.

================================================================================
ANTERIOR
================================================================================

PROBLEMA:
Sistema de Exceptions em regras opcionais (que podem ser 'vazias'). O método getNextToken
do SystaxManager (antes chamado de TokenizedCodeManager) é o método que emite erros caso não
encontre o token que está procurando. Porém quando o getNextToken é chamado de dentro de uma regra
opcional, o erro é capturado pelo block catch para que regras opcionais não dêem erro.
O problema é que na regra principal (regra INICIO) as duas ultimas regras são opcionais.
A regra é: (INICIO -> Especialidade  String  String  LISTA_DE_QUESTOES  LISTA_DE_TESTES)
Isso evidencia o problema de que nesse caso um erro nunca será emitido. O compilador vai passar
pelo erro, identificar, mas como é opcional não vai emitir e a interpretação das regras vai
finalizar com sucesso.


SOLUÇÃO MELHOR:
- Remover o SyntaxManager de ser passado como parâmetro
- Remover o SyntaxManager.optionalRule() : SM será criado dentro das regras mas de forma normal:
SyntaxManager sm = new SyntaxManager()
- Remover sistema de stackLevel

A solução consiste em simplesmente:
Todas as regras exceto a inicial irão executar seus códigos dentro de um bloco try-catch.
No bloco catch sempre vai ser chamado sm.resetRulePointer() para que caso a regra falhe, o 
ponteiro da lista de token retorne ao indice onde estava antes da regra iniciar.
Abaixo desse comando, CASO a regra NÃO seja opcional, será chamado:
  sm.rethrowSavedExceptionFromCatchBlock()
Esse método, do SyntaxManager, irá então reemitir o erro que estiver salvo. Ou seja, sempre que
ocorrer um erro em uma regra não-opcional ele será capturado e em seu lugar será emitido o erro que
foi salvo. Ou seja o erro salvo sempre será emitido quando acontecer um erro. E como a regra inicial
não é opcional, quando ela acabar de executar alguma regra opcional que tenha chamado: BUM! o erro
emitido terá chegado a um nível de execução que não tem catch, e irá finalmente aparecer.
Perfeito sem precisar de geringonças!

Considera a regra: INICIO -> Questao ListaDeQuestoes Teste ListaDeTestes
Digamos que a regra Questao passe ok, mas a ListaDeQuestoes dê erro pois o usuário escreveu uma
questao pela metade. Então o erro é salvo, mas como a regra é opcional ela nao emite um erro. A
próxima regra é Teste que inevitavelmente vai dar erro, pois como a anterior falhou, o resetRulePointer
voltou ao index do token que começou a Questao que foi deixada pela metade. Quando a regra Teste
falhar, como ela não é opcional ela irá emitir um erro, que será capturado e em seu lugar será
emitido o erro salvo, que é o erro da ListaDeQuestões. TA-DA!
Caso o erro ocorra só na ultima regra, ListaDeTestes, como ela é opcional não irá emitir um erro, e
como ela é a ultima e não existe uma outra regra não opcional depois para emitir o erro, ele vai
ser ignorado e a execução terminará com sucesso. Para evitar isso, ao final da regra inicial deve
ser chamado o métod:
  throwSavedExceptionAtTheEndOfStartRule()
que irá emitir o erro salvo se o index do erro for mior do que o pointer.

--------------------------------------

TENTATIVA SOLUÇÃO ANTORIOR:
Alteração do método getNextToken para que quando um erro for emitido, ele seja salvo em um static
field na classe SystaxManager, junto com o index do token em que ocorreu. Sempre que um erro for
emitido, o método de salvamento só irá salvar o erro se o index do token desse erro for maior que
o index do token do erro que já está salvo. Desse forma é garantido que o erro salvo sempe será o 
que aconteceu no token de index maior, ou seja, que o compilador sempre interpretou o numero
máximo de tokens que conseguiu. Porém ainda não se resolveu o problema, é necessário ainda emitir
o erro salvo.

OBS:
A Estratégia de se passar o SyntaxManager por parâmetro e ter a regra abstrata pai GrammarRule
criar um novo SM para a regra filha não funciona pq para que funcionasse teria que se criar
um field dentro da GrammarRule para alocar o SM. Não quero fazer isso pois as Regras devem ter
somente fields relacionados à SyntexTree, para que os objetos da árvore não contenham resquícios
de campos e métodos relacionados ao processo de compilação.

Para a segunda parte da solução, tentarei criar um sistema de StakLevel
Dentro do contrutor das regras terá que ser criado explicitamente um SyntaxManager e informado
segunda a regra é opcional ou não. Isso será feito fazendo:
sm = SyntaxManager.optionalRule( true/false )
Esse método cria um novo SyntaxManager e o configura como opicional ou nal.
Além disso sempre que um SM for criada, o campo static lowestOptionalStackLevel no SyntaxManager
será atualizado, de acordo com a optionalRule. Se a SM for criado com optionalRule = false, entao
ele vai verificar se o stackLevel atual é maior ou menor que o lowestOptionalStackLevel, dessa
forma garantindo que uma regra não opcional dentro de uma regra opcional tb seja opicional.

Agora falta identificar quando uma regra nao for opcional para emitir o erro salvo.